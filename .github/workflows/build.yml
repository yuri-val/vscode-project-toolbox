name: Build and Release Executables

on:
  push:
    tags:
      - '*'  # Run only on new tag

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact_name: VSCode-Project-Toolbox-Windows.exe
            icon: assets/icon.ico
            pyinstaller_opts: --onefile --name "VSCode-Project-Toolbox" --windowed --icon "assets/icon.ico"
          - os: macos-latest
            artifact_name: VSCode-Project-Toolbox-macOS-Intel
            icon: assets/icon.icns
            pyinstaller_opts: --onefile --name "VSCode-Project-Toolbox" --windowed --icon "assets/icon.icns"
          - os: macos-13
            artifact_name: VSCode-Project-Toolbox-macOS-Silicon
            icon: assets/icon.icns
            pyinstaller_opts: --onefile --name "VSCode-Project-Toolbox" --windowed --icon "assets/icon.icns"
          - os: ubuntu-latest
            artifact_name: VSCode-Project-Toolbox-Linux
            icon: ""
            pyinstaller_opts: --onefile --name "VSCode-Project-Toolbox" --windowed

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install gettext (macOS only)
        if: runner.os == 'macOS'
        run: brew install gettext

      - name: Install Qt5 for PyQt5 (macOS only)
        if: runner.os == 'macOS'
        run: |
          brew install qt@5
          echo "$(brew --prefix qt@5)/bin" >> $GITHUB_PATH

      - name: Install Qt dependencies (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxcb-xinerama0 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xfixes0 libxcb-shape0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.8'

      - name: Install dependencies
        run: pip install -r requirements.txt pyinstaller

      - name: Build executable
        run: |
          pyinstaller ${{ matrix.pyinstaller_opts }} main.py

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare release assets
        run: |
          mkdir -p release_assets
          # Windows executable
          if [ -f dist/VSCode-Project-Toolbox-Windows.exe/VSCode-Project-Toolbox.exe ]; then
            cp dist/VSCode-Project-Toolbox-Windows.exe/VSCode-Project-Toolbox.exe release_assets/VSCode-Project-Toolbox-Windows.exe
          fi
          
          # macOS Intel executable
          if [ -f dist/VSCode-Project-Toolbox-macOS-Intel/VSCode-Project-Toolbox ]; then
            cp dist/VSCode-Project-Toolbox-macOS-Intel/VSCode-Project-Toolbox release_assets/VSCode-Project-Toolbox-macOS-Intel
          fi
          
          # macOS ARM/Silicon executable
          if [ -f dist/VSCode-Project-Toolbox-macOS-Silicon/VSCode-Project-Toolbox ]; then
            cp dist/VSCode-Project-Toolbox-macOS-Silicon/VSCode-Project-Toolbox release_assets/VSCode-Project-Toolbox-macOS-Silicon
          fi
          
          # Linux executable
          if [ -f dist/VSCode-Project-Toolbox-Linux/VSCode-Project-Toolbox ]; then
            cp dist/VSCode-Project-Toolbox-Linux/VSCode-Project-Toolbox release_assets/VSCode-Project-Toolbox-Linux
          fi
          
          # List files for debugging
          echo "Files to be uploaded:"
          ls -la release_assets/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
